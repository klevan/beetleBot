myPath <- "C:/Users/klevan/Desktop/my stuff/post2"
myPathToData <- paste(myPath,"data",sep="/")
library(taxize)
library(XML)
library(AntWeb)
multipleCombine <- function(input, ply = llply){
require(plyr)
require(dplyr)
ply(input, function(x){
t <- read.table(x, header=TRUE, sep=",",stringsAsFactors = FALSE) # read the csv
t1 <- rbind(t) # rbind it to a temporary variable
return(t1) # return the full variable
}
)
}
# Scraping AntBase for a complete list global of Ant species
antBase <- "http://osuc.biosci.ohio-state.edu/hymenoptera/tsa.list_valid_taxa?query=Formicidae+Species"
allAnts <- unique.data.frame(xmlToDataFrame(getNodeSet(xmlParse(antBase,encoding = "UTF-8"),"//Species"),
stringsAsFactors = FALSE))
colnames(allAnts) <- "scientificName"
mySuffix <- '.csv'
fileList <- list.files(myPathToData, full.names=TRUE)
fileList <- fileList[grep(mySuffix,fileList)]
doOverTaxa <- vector()
lastspp <- substr(fileList[length(fileList)],nchar(myPathToData)+2,nchar(fileList[length(fileList)])-4)
for (i in (match(lastspp,allAnts$scientificName)+1):dim(allAnts)[1]){
tmp <- try(dBase <- aw_data(scientific_name = allAnts$scientificName[i])$data)
if(is.null(tmp)==FALSE){
dBase$scientific_name <- paste(dBase$genus,dBase$specificEpithet,sep=" ")
write.csv(dBase,paste(myPathToData,paste(allAnts$scientificName[i],"csv",sep="."),sep="/"),row.names=FALSE)
}
if(class(tmp)=="try-error"){
doOverTaxa <- c(doOverTaxa,i)
}
dBase <- data.frame()
}
myPath <- "C:/Users/klevan/Desktop/my stuff/post2"
myPathToData <- paste(myPath,"data",sep="/")
library(taxize)
library(XML)
library(AntWeb)
multipleCombine <- function(input, ply = llply){
require(plyr)
require(dplyr)
ply(input, function(x){
t <- read.table(x, header=TRUE, sep=",",stringsAsFactors = FALSE) # read the csv
t1 <- rbind(t) # rbind it to a temporary variable
return(t1) # return the full variable
}
)
}
# Scraping AntBase for a complete list global of Ant species
antBase <- "http://osuc.biosci.ohio-state.edu/hymenoptera/tsa.list_valid_taxa?query=Formicidae+Species"
allAnts <- unique.data.frame(xmlToDataFrame(getNodeSet(xmlParse(antBase,encoding = "UTF-8"),"//Species"),
stringsAsFactors = FALSE))
colnames(allAnts) <- "scientificName"
mySuffix <- '.csv'
fileList <- list.files(myPathToData, full.names=TRUE)
fileList <- fileList[grep(mySuffix,fileList)]
doOverTaxa <- vector()
lastspp <- substr(fileList[length(fileList)],nchar(myPathToData)+2,nchar(fileList[length(fileList)])-4)
for (i in (match(lastspp,allAnts$scientificName)+1):dim(allAnts)[1]){
tmp <- try(dBase <- aw_data(scientific_name = allAnts$scientificName[i])$data)
if(is.null(tmp)==FALSE){
dBase$scientific_name <- paste(dBase$genus,dBase$specificEpithet,sep=" ")
write.csv(dBase,paste(myPathToData,paste(allAnts$scientificName[i],"csv",sep="."),sep="/"),row.names=FALSE)
}
if(class(tmp)=="try-error"){
doOverTaxa <- c(doOverTaxa,i)
}
dBase <- data.frame()
}
require(knitr)
#################### Set up Input Variables #############################
#Inputs - Where the git repo is on your computer
gitRepoPath <-"~/Documents/GitHub/klevan.github.io/"
#jekyll will only render md posts that begin with a date. Add one.
add.date <- "2015-10-26-beetle"
#set working dir - this is where the data are located
wd <- "~/Documents/beetleBot/data"
################### CONFIG BELOW IS REQUIRED BY JEKYLL - DON"T CHANGE ############
#set data working dir
setwd(wd)
#don't change - this is the posts dir location required by jekyll
postsDir <- ("_posts")
#images path
imagePath <- "images/rfigs/"
#set the base url for images and links in the md file
base.url="{{ site.baseurl }}/"
opts_knit$set(base.url = base.url)
getwd()
setwd("~/Github")
wd <- "~/Github/beetleBot/data"
setwd(wd)
require(knitr)
#################### Set up Input Variables #############################
#Inputs - Where the git repo is on your computer
gitRepoPath <-"~/Documents/GitHub/klevan.github.io/"
#jekyll will only render md posts that begin with a date. Add one.
add.date <- "2015-10-26-beetle"
#set working dir - this is where the data are located
wd <- "~/Github/beetleBot/data"
################### CONFIG BELOW IS REQUIRED BY JEKYLL - DON"T CHANGE ############
#set data working dir
setwd(wd)
#don't change - this is the posts dir location required by jekyll
postsDir <- ("_posts")
#images path
imagePath <- "images/rfigs/"
#set the base url for images and links in the md file
base.url="{{ site.baseurl }}/"
opts_knit$set(base.url = base.url)
#################### Set up Image Directory #############################
#make sure image directory exists
#if it doesn't exist, create it
#note this will fail if the sub dir doesn't exist
if (file.exists(paste0(wd,"/","images"))){
print("image dir exists - all good")
} else {
#create image directory structure
dir.create(file.path(wd, "images/"))
dir.create(file.path(wd, "images/rfigs"))
dir.create(file.path(wd, figDir))
print("image directories created!")
}
#NOTE -- delete the image directory at the end!
#################### Get List of RMD files to Render #############################
#get a list of files to knit / purl
rmd.files <- list.files(paste0(gitRepoPath,postsDir), pattern="*.Rmd", full.names = TRUE )
#################### Set up Image Directory #############################
for (files in rmd.files) {
#copy .Rmd file to data working directory
file.copy(from = files, to=wd, overwrite = TRUE)
input=basename(files)
#setup path to images
#print(paste0(imagePath, sub(".Rmd$", "", basename(input)), "/"))
fig.path <- paste0(imagePath, sub(".Rmd$", "", input),"/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = " ")
#render_jekyll()
render_markdown(strict = TRUE)
#create the markdown file name - add a date at the beginning to Jekyll recognizes
#it as a post
mdFile <- paste0(gitRepoPath,postsDir,"/",sub(".Rmd$", "", input), ".md")
#knit Rmd to jekyll flavored md format
knit(input, output = mdFile, envir = parent.frame())
#COPY image director, rmd file OVER to the GIT SITE###
#copy image directory over
file.copy(paste0(wd,"/",fig.path), paste0(gitRepoPath,imagePath), recursive=TRUE)
#copy rmd file to the rmd directory on git
file.copy(paste0(wd,"/",basename(files)), paste0(gitRepoPath,postsDir), recursive=TRUE)
#delete local repo copies of RMD files just so things are cleaned up??
## OUTPUT STUFF TO R ##
#output code in R format
rCodeOutput <- paste0(gitRepoPath,postsDir,"/", sub(".Rmd$", "", basename(files)), ".R")
#purl the code to R
purl(files, output = rCodeOutput)
#clean up
#remove Rmd file from data working directory
unlink(basename(files))
#print when it's done
doneWith <- paste0("processed: ",files)
print(doneWith)
}
#clean up images directory (remove all sub dirs)
unlink(paste0(wd,"/",imagePath,"*"), recursive = TRUE)
########################### end script
rmd.files
require(knitr)
#################### Set up Input Variables #############################
#Inputs - Where the git repo is on your computer
gitRepoPath <-"~/Documents/GitHub/klevan.github.io/"
#jekyll will only render md posts that begin with a date. Add one.
add.date <- "2015-10-26-beetle"
#set working dir - this is where the data are located
wd <- "~/Documents/data"
################### CONFIG BELOW IS REQUIRED BY JEKYLL - DON"T CHANGE ############
#set data working dir
setwd(wd)
#don't change - this is the posts dir location required by jekyll
postsDir <- ("_posts")
#images path
imagePath <- "images/rfigs/"
#set the base url for images and links in the md file
base.url="{{ site.baseurl }}/"
opts_knit$set(base.url = base.url)
#################### Set up Image Directory #############################
#make sure image directory exists
#if it doesn't exist, create it
#note this will fail if the sub dir doesn't exist
if (file.exists(paste0(wd,"/","images"))){
print("image dir exists - all good")
} else {
#create image directory structure
dir.create(file.path(wd, "images/"))
dir.create(file.path(wd, "images/rfigs"))
dir.create(file.path(wd, figDir))
print("image directories created!")
}
#NOTE -- delete the image directory at the end!
